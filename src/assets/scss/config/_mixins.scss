// ==========================================================================
// # MIXINS
//
// Ncce useful utils mixins
// ==========================================================================

// ==========================================================================
//  GENERAL - @TODO need to name this better...
// ==========================================================================

@mixin clearfix {
    &::after {
        clear: both;
        content: "";
        display: table;
    }
}





// CONTAINER
@mixin container($max-width: $container-width) {
    display: block;
    margin: 0 auto;
    // @TODO: Review this... was breaking for christmas 2018 carousel
    // width: 100%;
    max-width: $max-width;
    padding-left: $half-spacing-unit;
    padding-right: $half-spacing-unit;
}





// VISUAL HIDDEN
//
// To hide content visually but leave it readable to screenreaders
// Taken from HTML5 Boilerplate - https://github.com/h5bp/html5-boilerplate/blob/master/dist/css/main.css
@mixin vh() {
    border: 0;
    clip: rect(0 0 0 0);
    -webkit-clip-path: inset(50%);
    clip-path: inset(50%);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    white-space: nowrap;
    width: 1px;
    // stylelint-disable-next-line
    /* 1 */

    &.focusable {
        // stylelint-disable-next-line
        &:active,
        &:focus {
            clip: auto;
            -webkit-clip-path: none;
            clip-path: none;
            height: auto;
            margin: 0;
            overflow: visible;
            position: static;
            white-space: inherit;
            width: auto;
        }
    }
}





// LANDMARK
// Adding `margin-bottom` to an element
// ==========================================================================
@mixin landmark($spacing: $half-spacing-unit, $desktop: true) {
    margin-bottom: $spacing;

    @if($desktop==true) {
        @include mq(medium) {
            margin-bottom: $spacing * 2;
        }
    }
}




// BAND
// Adding padding to an element. By default applied above & below
// ==========================================================================
@mixin band($spacing: $half-spacing-unit, $apply: both) {
    @if($apply !="both" and $apply=="top" or $apply=="bottom") {
        $padding: "padding-#{$apply}";
        #{$padding}: $spacing;

        @include mq(medium) {
            #{$padding}: $spacing * 2;
        }
    }

    @else {
        padding-bottom: $spacing;
        padding-top: $spacing;

        @include mq(medium) {
            padding-bottom: $spacing * 2;
            padding-top: $spacing * 2;
        }
    }
}





// Flex Col
// @param {attribute} $x-align - X asis positioning
// @param {attribute} $y-align - Y asis positioning
@mixin flex-col($x-align: center, $y-align: flex-start, $ie: false) {
    @if($ie==true) {
        display: table-cell;
        vertical-align: middle;
    }

    @supports (display: flex) {
        align-items: $x-align;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        justify-content: $y-align;
    }
}





// ==========================================================================
// # TYPE
// ==========================================================================


// @mixin fontFace($family, $src, $weight: normal, $style: normal) {
// 	@font-face {
// 		font-family: $family;
//
//         @each $font, $format in $src {
//             $i: index($src, $font);
//             $punctuation: ',';
//
//             @if($punctuation == length($src)) {
//                 $punctuation: ';';
//             }
//
//         }
// 		src: url('#{$src}.eot'); // IE9 compat
// 		src: url('#{$src}.woff') format('woff'),
//             url('#{$src}.woff2') format('woff2');
//
// 		font-style: $style;
// 		font-weight: $weight;
// 	}
// }





// # HEADINGS
// ====================

// This was on _title.scss but needed to be moved to be used on _typography.scss
@mixin heading($key: false) {

    // iterate through definition
    @each $size, $config in map-get($headings-typeset, $key) {
        @if ($size==default) {
            @include _heading($config);
        }

        @else {
            @include mq($until: $size) {
                @include _heading($config);
            }
        }
    }
}

@mixin _heading($config) {
    // get config
    $font-size: map-get($config, font-size);
    $line-height: map-get($config, line-height);

    // munge line height
    @if ($line-height > 3) {
        $line-height: $line-height / $font-size;
    }

    // output
    font-size: $font-size;
    line-height: $line-height;
}


// # ALT TYPE SIZES
// # Gets values from `$alt-body-type` map
// ==========================================================================

@mixin fsz($key: false) {
    @if($key !=false) {
        font-size: map-deep-get($alt-body-typeset, $key, font-size);
        line-height: map-deep-get($alt-body-typeset, $key, line-height);
    }
}


//- Mixin: Fluid Type
///
/// Magic calc + vh to allow text to be fluid between minimum
/// and maximum breakpoints.
///
/// @group typography
/// @param {variable} $min-font-size [12px] - Minimum font size
/// @param {variable} $max-font-size [24px] - Maximum font size
/// @param {variable} $lower-range [420px] - Stop scaling font smaller at this screen resolution
/// @param {variable} $upper-range [900px] - Stop scaling font larger at this screen resolution
/// @example
///   h1 {
///     @include responsive-type(20px, 48px);
///   }
/// @site https://madebymike.com.au/writing/precise-control-responsive-typography/
@mixin fluid-type($min-font-size: 15px, $max-font-size: 20px, $lower-range: 420px, $upper-range: 992px) {
    font-size: calc(#{$min-font-size} + #{(($max-font-size / ($max-font-size * 0 + 1)) - ($min-font-size / ($min-font-size * 0 + 1)))} * ((100vw - #{$lower-range}) / #{(($upper-range / ($upper-range * 0 + 1)) - ($lower-range / ($lower-range * 0 + 1)))}));

    @media screen and (max-width: $lower-range) {
        font-size: $min-font-size;
    }

    @media screen and (min-width: $upper-range) {
        font-size: $max-font-size;
    }
}





// ==========================================================================
//  LISTS
// ==========================================================================

@mixin list-reset() {
    list-style: none;
    margin: 0;
    padding: 0;
}


@mixin inline-list($spacing: 0, $x-align: flex-start, $y-align: flex-start) {
    @include list-reset;
    @include flex-col($x-align, $y-align);

    .inline-list__item,
    > li {
        display: flex;

        &:not(:last-of-type) {
            margin-bottom: $spacing;
        }

        // @NOTE: To overwrite some shit styles
        &:last-child { margin-bottom: 0; }
    }
}

@mixin inline-list--ib($spacing: $spacing-unit, $x-align: flex-start, $y-align: flex-start) {
    @include list-reset;
    align-items: $y-align;
    display: flex;
    flex-direction: row;
    justify-content: $x-align;

    .inline-list__item,
    > li {
        display: flex;

        &:not(:last-child) {
            margin-right: $spacing;
        }

        // @NOTE: To overwrite some shit styles
        &:last-child { margin-bottom: 0; }
    }
}


@mixin inline-list--seperated($spacing: $spacing-unit, $x-align: flex-start, $y-align: flex-start) {
    @include inline-list--ib($spacing, $x-align, $y-align);
    flex-wrap: wrap;

    .inline-list__item,
    >li {
        // line-height: 1;
        position: relative;

        &:not(:last-of-type) {
            &:after {
                background-color: currentColor;
                content: "";
                height: 100%;
                position: absolute;
                right: -($spacing/2);
                width: 2px;

                @supports (display: grid) {
                    height: 80%;
                    top: 50%;
                    transform: translateY(calc(-50% - 2px)) skew(-15deg);
                }
            }
        }
    }
}

@mixin inline-list-mobile-verticle($spacing: 40px, $bp: small) {
    @include mq($until: $bp) {
        flex-direction: column;
        margin-right: 0;

        .inline-list__item,
        >li {
            // stylelint-disable-next-line
            &:not(:last-of-type) {
                margin-bottom: $spacing / 2;
            }
        }
    }
}





// ==========================================================================
// # COLOURS
// ==========================================================================

@mixin get-bgc($color, $shade: default) {
    background-color: get-color($color, $shade);
}

@mixin get-color($color, $shade: default) {
    color: get-color($color, $shade);
}





// ==========================================================================
//  LINKS STYLES
// ==========================================================================

@mixin link-underline($color: primary, $shade: default, $size: -2px) {
    box-shadow: inset 0 $size get-color($color, $shade);
    text-decoration: none;
    transition: box-shadow linear 0.2s;
}


@mixin link-external($top: -0.3rem, $right: 0, $width: 0.75rem) {
    padding-right: $half-spacing-unit * 0.75;
    position: relative;

    &:after {
        color: currentColor;
        content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23262626' class='svg-icon -external-link'%3E%3Cpath d='M14 16V5l-1 1v9H1V3h9l1-1H0v14z'/%3E%3Cpath d='M16 0h-5l1.8 1.8L6 8.6 7.4 10l6.8-6.8L16 5z'/%3E%3C/svg%3E%0A");
        height: 100%;
        position: absolute;
        right: $right;
        top: $top;
        transform: translate3d(0, 0, 0);
        transition: linear transform 0.15s;
        width: $width;
    }

    &:focus {
        &:after {
            transform: scale(1.15) translate3d(0.1rem, -0.1rem, 0);
        }
    }

    @include mq(medium) {
        &:hover {
            &:after {
                transform: scale(1.15) translate3d(0.1rem, -0.1rem, 0);
            }
        }
    }
}


@mixin inline-link($color, $shade: default, $activeSize: -4px) {
    @include link-underline($color, $shade);

    &:focus {
        @include link-underline($color, $shade, $activeSize);
        outline: 0;
    }

    @include mq(medium) {
        &:hover { @include link-underline($color, $shade, $activeSize); }
    }
}


@mixin active-link-transition($y: -5px, $activeOpacity: 0.85) {
    opacity: 1;
    transform: translate3d(0, 0, 0);
    transition: transform ease-in-out 0.15s, opacity ease-in-out 0.15s;

    &:focus {
        opacity: $activeOpacity;
    }

    @include mq(medium) {
        &:hover {
            opacity: $activeOpacity;
            transform: translate3d(0, $y, 0);
        }
    }
}





// ==========================================================================
// # IMAGES
// ==========================================================================

// # BASE BACKGROUND
// Used for bleed background components
@mixin base-background($position: 50% 0%, $bgc: 'off-white', $size: cover) {
    @if($bgc !=false) {
        background-color: get-color($bgc);
    }

    background-position: $position;
    background-repeat: no-repeat;
    background-size: $size;
}

@mixin background-overlay($color: white, $opacity: 0.65, $el: 'after') {
    background-blend-mode: multiply;
    position: relative;

    &:#{$el} {
        background-color: color-get($color);
        bottom: 0;
        content: "";
        left: 0;
        opacity: $opacity;
        position: absolute;
        right: 0;
        top: 0;
        transition: opacity ease-in 0.15s;
        z-index: $z-lvl-1;
    }
}

@mixin image-zoom {
    transition: transform ease-in-out 1s;
    will-change: transform;
}





// ==========================================================================
// # SEPARATOR LINE
// ==========================================================================

@mixin separator-line($height: 2px, $top: 2px) {

    // scss-lint:disable PropertyUnits
    &:after {
        background-color: currentColor;
        content: "";
        height: $height;
        left: 0;
        position: absolute;
        top: $top;
        width: 24px;
    }
}





// ==========================================================================
// # BOX
// ==========================================================================

@mixin box($spacing: $spacing-unit) {
    padding: $spacing;
}





// ==========================================================================
// # TRANSITIONS
// ==========================================================================

@mixin base-trans($duration: $transition-length, $type: all) {
    transition: $type $default-transition $duration;
}

@mixin custom-trans($type: all, $duration-in: $transition-length, $duration-out: $transition-length, $transition-type: ease-in-out) {
    transition: $type $duration-in $transition-type $duration-out;
}





// ==========================================================================
// # BUTTONS & CTA/LINKS
// ==========================================================================

@mixin btn-reset() {
    background: none;
    border: 0;
    padding: 0;
}

@mixin btn($bgColor: primary, $borderColor: primary, $color: black) {
    @include wf-primary;
    background-color: get-color($bgColor);
    border: 5px solid get-color($bgColor);
    border-radius: 6px;
    color: get-color($color);
    display: inline-block;
    padding: 15px $half-spacing-unit;
    text-decoration: none;
    transition: background-color ease-in-out 0.15s, color ease-in-out 0.15s;

    &:focus {
        @include btn-active($borderColor, $bgColor);
        outline: 0;
    }

    @include mq(medium) {
        &:hover {
            @include btn-active($borderColor, $bgColor);
        }
    }
}

@mixin btn-active($borderColor, $color: currentColor, $bgColor: transparent) {
    // 1. Checking if colours are Hex or string that is a key in our map
    @if( check-hex-value($borderColor) == false ) {
        $bgColor: get-color($bgColor);
        $borderColor: get-color($borderColor);
        $color: get-color($color);
    }

    background-color: $bgColor;
    border-color: $borderColor;
    color: $color;
}

@mixin btn-color($color: false, $color-shade: default, $color-two: black, $color-two-shade: default) {
    // Checking for color to exist
    @if($color != false) {
        // Setting hex values for `$color`s as variables
        $color-one: color-get($color, $color-shade);
        $color-two: color-get($color-two, $color-two-shade);


        background-color: $color-one;
        border-color: $color-one;
        color: $color-two;

        &:focus { @include btn-active($color-one, $color-one); }

        @include mq(medium) {
            &:hover { @include btn-active($color-one, $color-one); }
        }
    }
}


@mixin btn-disabled {
    // scss-lint:disable ImportantRule
    background-image: none !important;
    // scss-lint:disable ImportantRule
    cursor: default !important;
    opacity: 0.65;

    &:active { box-shadow: none; }
}


// # CTA
// ==============

@mixin cta($underline-color: primary, $color: black) {
    color: get-color($color);
    outline: 0;
    padding: 0 2px 2px 2px;
    position: relative;
    text-decoration: none;
    z-index: $z-lvl-1;

    &:after {
        background-color: get-color($underline-color);
        bottom: 0;
        content: "";
        height: 2px;
        left: 0;
        position: absolute;
        width: 100%;
        z-index: -1000;

        @include mq(medium) {
            @include base-trans;
        }
    }

    &:focus {
        &:after {
            height: calc(100% + 4px);
            transition: none;
        }
    }

    @include mq(medium) {
        &:hover {
            &:after {
                height: calc(100% + 4px);
            }
        }
    }
}




// ==========================================================================
// # CSS LOADING SPINNER
// ==========================================================================

@mixin loading-spinner($time: 1.5s, $selector: "&:before") {

    @keyframes spinner {
        0% {
            transform: translate3d(-50%, -50%, 0) rotate(0deg);
        }

        100% {
            transform: translate3d(-50%, -50%, 0) rotate(360deg);
        }
    }

    #{$selector} {
        @include base-trans;
        animation: 1.5s linear infinite spinner;
        border: solid rem(3) get-color(grey);
        border-bottom-color: get-color(primary);
        border-radius: 50%;
        content: "";
        height: $spacing-unit;
        left: 50%;
        opacity: 1;
        position: absolute;
        top: 50%;
        transform: translate3d(-50%, -50%, 0);
        width: $spacing-unit;
        z-index: $z-lvl-2;
    }
}





// ==========================================================================
// # LOADING OVERLAY
// ==========================================================================

@mixin loading-overlay() {
    position: relative;
    transition: opacity 0.2s linear;

    &:after {
        @include base-trans(0.01);
        background-color: rgba(get-color(bk), 0.75);
        content: "";
        height: 100%;
        left: 0;
        opacity: 0;
        position: absolute;
        top: 0;
        transform: translate3d(-100%, -100%, 0);
        width: 100%;
        z-index: $z-lvl-1;
    }

    &.-loading {
        @include loading-spinner;

        &:after {
            opacity: 1;
            transform: translate3d(0, 0, 0);
        }
    }
}





// ==========================================================================
// # CSS TRIANGLE
// ==========================================================================

@mixin css-triangle($direction: down, $color: black, $size: 12px) {
    $border-color: "border-top-color";
    $border-direction: "border-bottom-width";

    @if($direction==up) {
        $border-color: "border-bottom-color";
        $border-direction: "border-top-width";
    }

    @if($direction==right) {
        $border-color: "border-left-color";
        $border-direction: "border-right-width";
    }


}


@mixin svg-chevron($color: primary, $prop: "content") {
    $hex-string: get-color($color);
    $hex: str-replace("#{$hex-string}", "#", "");
    #{$prop}: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 19 11' fill='%23#{$hex}'%3E%3Cpath d='M9.5 11a1.51 1.51 0 0 1-1.06-.44l-8-8A1.5 1.5 0 0 1 2.56.44L9.5 7.38 16.44.44a1.5 1.5 0 0 1 2.12 2.12l-8 8A1.51 1.51 0 0 1 9.5 11z' /%3E%3C/svg%3E%0A");
}


@mixin triangle-border($direction: "top", $color: transparent, $size: 50px) {
    border-#{$direction}: solid #{$size} #{$color};
}





// ==========================================================================
// # CUSTOM SELECT ICON
// ==========================================================================

@mixin custom-select-icon {
    @include svg-chevron;
    background-color: transparent;
    fill: get-color(primary);
    height: 100%;
    position: absolute;
    right: 0;
    top: 50%;
    @include base-trans;
    transform: translate3d(0, calc(-50% - 20px), 0);
    width: 100%;
}





// ==========================================================================
// # FULL HEIGHT SECTION
// ==========================================================================

@mixin full-height-section() {
    display: table;
    min-height: 100vh;
    width: 100%;

    .full-height-section__inner {
        display: table-cell;
        vertical-align: middle;
    }

    @supports (display: flex) {
        @include flex-col(center, center);
        width: 100%;

        .full-height-section__inner {
            display: block;
            vertical-align: top;
        }
    }
}





// ==========================================================================
// # BASE BORDER
// ==========================================================================

@mixin base-border($direction: false, $width: 2px, $color: grey) {
    $prop: "border";

    @if($direction !=false) {
        $prop: "#{$prop}-#{$direction}";
    }

    #{$prop}: solid $width get-color($color);
}





// ==========================================================================
// # CSS LOADING SPINNER
// ==========================================================================

@mixin loading-spinner($time: 1.5s, $selector: "&:before") {

    @keyframes spinner {
        0% {
            transform: translate3d(-50%, -50%, 0) rotate(0deg);
        }

        100% {
            transform: translate3d(-50%, -50%, 0) rotate(360deg);
        }
    }

    #{$selector} {
        animation: 1.5s linear infinite spinner;
        border: solid 3px get-color(off-white);
        border-bottom-color: get-color(primary);
        border-radius: 50%;
        content: "";
        height: $spacing-unit;
        left: 50%;
        position: absolute;
        top: 50%;
        transform: translate3d(-50%, -50%, 0);
        width: $spacing-unit;
        z-index: $z-lvl-2;
    }
}





// ==========================================================================
// # ARROW COLOR
// ==========================================================================

@mixin two-color-arrow() {
    content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 50'%3E%3Cpath d='M25 0a25 25 0 1 0 25 25A25 25 0 0 0 25 0zm10.67 43.48L3.67 25l32-18.48z' fill='%23afa372'/%3E%3Cpath fill='%23b70060' d='M35.67 43.48V6.53L3.67 25l32 18.48z'/%3E%3C/svg%3E");
}

@mixin arrow-color-content($color: false, $color-shade: default) {
    @if($color != false) {
        content: url('#{arrow-color-modifier($color, $color-shade)}');
    }
}





// ==========================================================================
// # CAROUSEL ARROWS
// ==========================================================================

@mixin carousel-arrows($arrow-dimensions: 50px, $left-arrow-position: 10px, $right-arrow-position: 10px) {
    .slick-arrow {
        height: $arrow-dimensions;
        width: $arrow-dimensions;
    }

    .slick-prev {
        left: $left-arrow-position;
    }

    .slick-next {
        right: $right-arrow-position;
    }
}





// ==========================================================================
// # CUSTOM FORM ELEMENT
// ==========================================================================

@mixin custom-select() {
    background-color: #ffffff;
    overflow: hidden;
    position: relative;

    select {
        @include get-bgc(primary, light);
        appearance: none;
        border: 0;
        border-radius: 0;
        margin-bottom: 0;
        padding: 12px $spacing-unit 12px 15px;
        width: 100%;

        &:focus {
            @include active-input;
            @include get-bgc(primary, light);
        }
    }

    // Hide arrow in IE0+
    select::-ms-expand {
        display: none;
    }

    &:after {
        border-bottom: 0;
        border-left: $quarter-spacing-unit solid transparent;
        border-right: $quarter-spacing-unit solid transparent;
        border-top: $quarter-spacing-unit solid currentColor;
        bottom: auto;
        content: "";
        position: absolute;
        right: $quarter-spacing-unit / 2;
        top: auto;
        top: 50%;
        transform: translateY(-50%);
        transition: transform linear 0.15s;
        z-index: $z-lvl-1;
    }
}
